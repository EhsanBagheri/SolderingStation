/*
For experimenting with

Key fields:
* fSetTemperature must be set before starting the controller (target temperature in °C - you can use °F as well, the coefficients will probably have to be adjusted);
* fActualTemperature must be set at each iteration before calling TempControl_ImprovedTakeBackHalf();
* fGamma, fBeta1 and fBeta2 are the algorithm coefficients (must be set before starting the controller);
* fTimeStep is the time step in s (period between each iteration - 10 ms in my case, thus 10.e-3) (must be set before starting the controller).

Operation:
* After setting the proper fields, and making a first tip temperature measurement, and assigning it to the fActualTemperature field, call TempControl_Init() to initialize the controller;
* At each iteration (period must be fixed and correspond to the value set in the dTimeStep field): measure tip temperature, set fActualTemperature to it, and call TempControl_ImprovedTakeBackHalf(). After it returns, you can use the fHeaterControl field to control the heater PWM (fHeaterControl will be between 0.0 and 100.0, representing 0% to 100%);

The coefficients I used for C210 cartridges: fGamma = 1.0, fBeta1 = 0.2 and fBeta2 = 0.4. Keep in mind it's for temperatures in °C and a DC voltage (for the heater) of 12V.
*/

typedef struct
{
   float fSetTemperature;        // Set Temperature (°C)
   float fActualTemperature;     // Actual (measured) Tip Temperature (°C)

   // Improved Take-Back-Half algorithm.
   float fGamma;
   float fBeta1;
   float fBeta2;
   float fTimeStep;
   
   float fTemperaturePrev;
   float fTemperatureErrorPrevZC;
   float fHeaterControl;
   float fHeaterControlPrevZC;
}  TempControl_t;

void TempControl_Init(TempControl_t *pTC)
{
   pTC->fTemperaturePrev = pTC->fActualTemperature;
   pTC->fTemperatureErrorPrevZC = pTC->fSetTemperature - pTC->fActualTemperature;
   pTC->fHeaterControl = 0.0;
   pTC->fHeaterControlPrevZC = 0.0;
}

// One step: Improved Take-Back-Half algorithm.
//
void TempControl_ImprovedTakeBackHalf(TempControl_t *pTC)
{
   float fTemperatureError, fTemperatureDeriv;
   
   fTemperatureError = pTC->fSetTemperature - pTC->fActualTemperature;
   fTemperatureDeriv = (pTC->fActualTemperature - pTC->fTemperaturePrev) / pTC->fTimeStep;
   pTC->fTemperaturePrev = pTC->fActualTemperature;
   
   // Integral term.
   pTC->fHeaterControl += (pTC->fGamma * fTemperatureError);
   
   // Improvement: use derivative to minimize overshoot/undershoot.
   if ((fTemperatureError > 0.0) && (fTemperatureDeriv < 0.0))
      pTC->fHeaterControl -= pTC->fBeta1 * fTemperatureDeriv;
   else if ((fTemperatureError < 0.0) && (fTemperatureDeriv > 0.0))
      pTC->fHeaterControl -= pTC->fBeta2 * fTemperatureDeriv;
   
   // Output variable clipping.
   if (pTC->fHeaterControl < 0.0)
      pTC->fHeaterControl = 0.0;
   else if (pTC->fHeaterControl > 100.0)
      pTC->fHeaterControl = 100.0;
   
   // Take-Back Half.
   if ((fTemperatureError * pTC->fTemperatureErrorPrevZC) < 0.0)
   {
      pTC->fHeaterControl = 0.5 * (pTC->fHeaterControl + pTC->fHeaterControlPrevZC);
      
      pTC->fTemperatureErrorPrevZC = fTemperatureError;
      pTC->fHeaterControlPrevZC = pTC->fHeaterControl;
   }
}
